#!/bin/bash
# based on http://serverfault.com/a/360230/105615

set -e

PORTS="21211 21212 21213 21214 21215 21216 21217 21218 21219 21220 21221 21222 21223 21224 21225 21226 21227 21228 21229 21230"
USER=memcached
basedir="/tmp/env_mc_dev"
mkdir -p "$basedir/var/log"
mkdir -p "$basedir/var/run"

RETVAL=0
prog="memcached"
cmd="`which memcached`"
ip="127.0.0.1"
memory=64
threads=4


function start()
{
    port="$1"
    if [ `ps -ef | grep "$cmd" | grep -c $port` -ge 1 ]; then
        echo "Starting the memcached server on port '$port'... "
    else
        if [ ! -f $basedir/var/log/${port}.log ]; then 
            mkdir -p $basedir/var/log
            touch $basedir/var/log/${port}.log
        fi
        $cmd -d -u $USER -l $ip -t $threads -m ${memory} -p $port -P $basedir/var/run/${port}.pid > $basedir/var/log/${port}.log 2>&1
        echo "Starting the memcached server on port '$port'... "
    fi
}

function unix()
{
    name="${1:-unix_test}"
    if [ ! -f $basedir/var/log/${name}.log ]; then
        mkdir -p $basedir/var/log
        touch $basedir/var/log/${name}.log
    fi
    mkdir -p $basedir/var/run
    $cmd -d -u $USER -s $basedir/var/run/${name}.socket -t $threads -m ${memory} -P $basedir/var/run/${name}.pid > $basedir/var/log/${name}.log 2>&1
    echo "Starting the memcached server on '$basedir/var/run/${name}.socket'... "
}

function stop()
{
    port="$1"
    if [ `ps -ef | grep "$cmd" | grep -c $port` -eq 0 ]; then
        echo $"Stopped the memcached server on port '$port'... "
    else
        kill -TERM `ps -ef | grep "$cmd" | grep $port | grep -v grep | awk '{ print $2 }'`
        echo "Stopping the memcached server on port '$port'... "
    fi
}

function capture()
{
    start=`echo $PORTS | cut -d' ' -f1`
    host="${1:-${start}}"
    proxy=31311
    default=$((proxy+host-start))
    port="${2:-${default}}"
    output="$basedir/var/log/$host.log"
    $cmd -d -u $USER -l $ip -t $threads -m ${memory} -p $port -P $basedir/var/run/${port}.pid > $basedir/var/log/${port}.log 2>&1
    ncat --sh-exec "ncat localhost ${port}" -l ${host} --keep-open -o "$output" --append-output &
    echo $! > "$basedir/var/run/${host}.pid"
}

function virtualize()
{
    if [ ! -e venv ]; then
        py="${1:-`which python 2>/dev/null`}"
        if ! $py -m pip list | grep -w virtualenv &> /dev/null; then
            $py -m pip install virtualenv
        fi
        $py -m virtualenv --python="$py" --seeder=pip venv;
        source venv/bin/activate
        pip install -U pip
        pip install Cython setuptools future pytest greenify gevent
    else
        source venv/bin/activate
    fi
}

function src_dir()
{
    cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd
}

case "$1" in
    start) 
        if [ -n "$2" ]; then
            start $2
        else
            for port in $PORTS; do
                start $port &
            done
            wait
        fi
        ;;
    stop)   
        if [ -n "$2" ]; then
            port="$2"
            stop $port
        else
            for port in $PORTS; do
                stop $port &
            done
            wait
            rm -rf $basedir
        fi
        ;;
    restart)
        if [ -n "$2" ]; then
            stop $2
            start $2
        else
            for port in $PORTS; do
                stop $port &
                start $port &
            done
            wait
        fi
        ;;
    unix)
        shift
        unix $@
        ;;
    startall)
        unix &
        for port in $PORTS; do
            start $port &
        done
        wait
        ;;
    stopall)
        if [ `ls $basedir/var/run/ | grep -c .pid` -ge 1 ]; then
            # names="`basename $basedir/var/run/*.pid | cut -d. -f1`"
            # for name in $names; do
            #     stop $name &
            # done
            for f in $basedir/var/run/*.pid; do
                cat "$f" | xargs kill
            done
        fi
        # wait
        rm -rf $basedir
        ;;
    capture)
        shift
        capture $@
        ;;
    cy-debug)
        cd "`src_dir`/.."
        git apply misc/git/debug.patch --recount &> /dev/null || true
        source misc/git/pre-commit
        virtualize "`which python-dbg || which python3-dbg`"
        dbg="`which python-dbg || which python3-dbg`"
        $dbg setup.py build_ext --inplace
        if [ -n "$2" ]; then
            shift
            cygdb . --skip-interpreter -- -ex start --args "$dbg" setup.py test -a "$*"
        else
            cygdb . --skip-interpreter -- -ex start --args "$dbg" setup.py test
        fi
        ;;
    run-test)
        cd "`src_dir`/.."
        virtualize
        shift
        python setup.py test -a "-k $*"
        ;;
    bench)
        cd "`src_dir`/.."
        git apply misc/git/debug.patch -R --recount &> /dev/null || true
        make clean
        virtualize
        python setup.py build_ext --inplace
        python -m pip install pylibmc python-memcached
        python -m pip install -e .
        python misc/runbench.py
        ;;
    *)
        printf 'Usage: %s {start|stop|restart} <port>\n' "$prog"
        exit 1
        ;;
esac
